package kr.knetz.kddi.app.l;

import kr.knetz.kddi.app.v.x.Variables;

public class Crc16 {

//    public static int[] CRCTable(){
//        int[] CRC = new int[256];
//        CRC[0] =   0x0000;	CRC[1] =   0x1021;	CRC[2] =   0x2042;	CRC[3] =   0x3063;	CRC[4] =   0x4084;	CRC[5] =   0x50a5;	CRC[6] =   0x60c6;	CRC[7] =   0x70e7;
//        CRC[8] =   0x8108;	CRC[9] =   0x9129;	CRC[10] =  0xa14a;	CRC[11] =  0xb16b;	CRC[12] =  0xc18c;	CRC[13] =  0xd1ad;	CRC[14] =  0xe1ce;	CRC[15] =  0xf1ef;
//        CRC[16] =  0x1231;	CRC[17] =  0x0210;	CRC[18] =  0x3273;	CRC[19] =  0x2252;	CRC[20] =  0x52b5;	CRC[21] =  0x4294; 	CRC[22] =  0x72f7;	CRC[23] =  0x62d6;
//        CRC[24] =  0x9339;  CRC[25] =  0x8318; 	CRC[26] =  0xb37b;	CRC[27] =  0xa35a;	CRC[28] =  0xd3bd; 	CRC[29] =  0xc39c; 	CRC[30] =  0xf3ff;	CRC[31] =  0xe3de;
//        CRC[32] =  0x2462; 	CRC[33] =  0x3443; 	CRC[34] =  0x0420; 	CRC[35] =  0x1401; 	CRC[36] =  0x64e6; 	CRC[37] =  0x74c7; 	CRC[38] =  0x44a4; 	CRC[39] =  0x5485;
//        CRC[40] =  0xa56a; 	CRC[41] =  0xb54b; 	CRC[42] =  0x8528;	CRC[43] =  0x9509;	CRC[44] =  0xe5ee;	CRC[45] =  0xf5cf;	CRC[46] =  0xc5ac;	CRC[47] =  0xd58d;
//        CRC[48] =  0x3653;	CRC[49] =  0x2672;	CRC[50] =  0x1611;	CRC[51] =  0x0630;	CRC[52] =  0x76d7;	CRC[53] =  0x66f6;	CRC[54] =  0x5695;	CRC[55] =  0x46b4;
//        CRC[56] =  0xb75b;	CRC[57] =  0xa77a;	CRC[58] =  0x9719;	CRC[59] =  0x8738;	CRC[60] =  0xf7df;	CRC[61] =  0xe7fe;	CRC[62] =  0xd79d;	CRC[63] =  0xc7bc;
//        CRC[64] =  0x48c4;	CRC[65] =  0x58e5;	CRC[66] =  0x6886;	CRC[67] =  0x78a7;	CRC[68] =  0x0840;	CRC[69] =  0x1861;	CRC[70] =  0x2802;	CRC[71] =  0x3823;
//        CRC[72] =  0xc9cc;	CRC[73] =  0xd9ed;	CRC[74] =  0xe98e;	CRC[75] =  0xf9af;	CRC[76] =  0x8948;	CRC[77] =  0x9969;	CRC[78] =  0xa90a;	CRC[79] =  0xb92b;
//        CRC[80] =  0x5af5;	CRC[81] =  0x4ad4;	CRC[82] =  0x7ab7;	CRC[83] =  0x6a96;	CRC[84] =  0x1a71;	CRC[85] =  0x0a50;	CRC[86] =  0x3a33;	CRC[87] =  0x2a12;
//        CRC[88] =  0xdbfd;	CRC[89] =  0xcbdc;	CRC[90] =  0xfbbf;	CRC[91] =  0xeb9e;	CRC[92] =  0x9b79;	CRC[93] =  0x8b58;	CRC[94] =  0xbb3b;	CRC[95] =  0xab1a;
//        CRC[96] =  0x6ca6;	CRC[97] =  0x7c87;	CRC[98] =  0x4ce4;	CRC[99] =  0x5cc5;	CRC[100] = 0x2c22;	CRC[101] = 0x3c03;	CRC[102] = 0x0c60;	CRC[103] = 0x1c41;
//        CRC[104] = 0xedae;	CRC[105] = 0xfd8f;	CRC[106] = 0xcdec;	CRC[107] = 0xddcd;	CRC[108] = 0xad2a;	CRC[109] = 0xbd0b;	CRC[110] = 0x8d68;	CRC[111] = 0x9d49;
//        CRC[112] = 0x7e97;	CRC[113] = 0x6eb6;	CRC[114] = 0x5ed5;	CRC[115] = 0x4ef4;	CRC[116] = 0x3e13;	CRC[117] = 0x2e32;	CRC[118] = 0x1e51;	CRC[119] = 0x0e70;
//        CRC[120] = 0xff9f;	CRC[121] = 0xefbe;	CRC[122] = 0xdfdd;	CRC[123] = 0xcffc;	CRC[124] = 0xbf1b;	CRC[125] = 0xaf3a;	CRC[126] = 0x9f59;	CRC[127] = 0x8f78;
//        CRC[128] = 0x9188;	CRC[129] = 0x81a9;	CRC[130] = 0xb1ca;	CRC[131] = 0xa1eb;	CRC[132] = 0xd10c;	CRC[133] = 0xc12d;	CRC[134] = 0xf14e;	CRC[135] = 0xe16f;
//        CRC[136] = 0x1080;	CRC[137] = 0x00a1;	CRC[138] = 0x30c2;	CRC[139] = 0x20e3;	CRC[140] = 0x5004;	CRC[141] = 0x4025;	CRC[142] = 0x7046;	CRC[143] = 0x6067;
//        CRC[144] = 0x83b9;	CRC[145] = 0x9398;	CRC[146] = 0xa3fb;	CRC[147] = 0xb3da;	CRC[148] = 0xc33d;	CRC[149] = 0xd31c;	CRC[150] = 0xe37f;	CRC[151] = 0xf35e;
//        CRC[152] = 0x02b1;	CRC[153] = 0x1290;	CRC[154] = 0x22f3;	CRC[155] = 0x32d2;	CRC[156] = 0x4235;	CRC[157] = 0x5214;	CRC[158] = 0x6277;	CRC[159] = 0x7256;
//        CRC[160] = 0xb5ea;	CRC[161] = 0xa5cb;	CRC[162] = 0x95a8;	CRC[163] = 0x8589;	CRC[164] = 0xf56e;	CRC[165] = 0xe54f;	CRC[166] = 0xd52c;	CRC[167] = 0xc50d;
//        CRC[168] = 0x34e2;	CRC[169] = 0x24c3;	CRC[170] = 0x14a0;	CRC[172] = 0x0481;	CRC[173] = 0x7466;	CRC[174] = 0x6447;	CRC[175] = 0x5424;	CRC[176] = 0x4405;
//        CRC[176] = 0xa7db;	CRC[177] = 0xb7fa;	CRC[178] = 0x8799;	CRC[179] = 0x97b8;	CRC[180] = 0xe75f;	CRC[181] = 0xf77e;	CRC[182] = 0xc71d;	CRC[183] = 0xd73c;
//        CRC[184] = 0x26d3;	CRC[185] = 0x36f2;	CRC[186] = 0x0691;	CRC[187] = 0x16b0;	CRC[188] = 0x6657;	CRC[189] = 0x7676;	CRC[190] = 0x4615;	CRC[191] = 0x5634;
//        CRC[192] = 0xd94c;	CRC[193] = 0xc96d;	CRC[194] = 0xf90e;	CRC[195] = 0xe92f;	CRC[196] = 0x99c8;	CRC[197] = 0x89e9;	CRC[198] = 0xb98a;	CRC[199] = 0xa9ab;
//        CRC[200] = 0x5844;	CRC[201] = 0x4865;	CRC[202] = 0x7806;	CRC[203] = 0x6827;	CRC[204] = 0x18c0;	CRC[205] = 0x08e1;	CRC[206] = 0x3882;	CRC[207] = 0x28a3;
//        CRC[208] = 0xcb7d;	CRC[209] = 0xdb5c;	CRC[210] = 0xeb3f;	CRC[211] = 0xfb1e;	CRC[212] = 0x8bf9;	CRC[213] = 0x9bd8;	CRC[214] = 0xabbb;	CRC[215] = 0xbb9a;
//        CRC[216] = 0x4a75;	CRC[217] = 0x5a54;	CRC[218] = 0x6a37;	CRC[219] = 0x7a16;	CRC[220] = 0x0af1;	CRC[221] = 0x1ad0;	CRC[222] = 0x2ab3;	CRC[223] = 0x3a92;
//        CRC[224] = 0xfd2e;	CRC[225] = 0xed0f;	CRC[226] = 0xdd6c;	CRC[227] = 0xcd4d;	CRC[228] = 0xbdaa;	CRC[229] = 0xad8b;	CRC[230] = 0x9de8;	CRC[231] = 0x8dc9;
//        CRC[232] = 0x7c26;	CRC[233] = 0x6c07;	CRC[234] = 0x5c64;	CRC[235] = 0x4c45;	CRC[236] = 0x3ca2;	CRC[237] = 0x2c83;	CRC[238] = 0x1ce0;	CRC[239] = 0x0cc1;
//        CRC[240] = 0xef1f;	CRC[241] = 0xff3e;	CRC[242] = 0xcf5d;	CRC[243] = 0xdf7c;	CRC[244] = 0xaf9b;	CRC[245] = 0xbfba;	CRC[246] = 0x8fd9;	CRC[247] = 0x9ff8;
//        CRC[248] = 0x6e17;	CRC[249] = 0x7e36;	CRC[250] = 0x4e55;	CRC[251] = 0x5e74;	CRC[252] = 0x2e93;	CRC[253] = 0x3eb2;	CRC[254] = 0x0ed1;	CRC[255] = 0x1ef0;
//
//        return CRC;
//    }

    public static int[] Crc16Table = new int[] {
                0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50a5, 0x60c6, 0x70e7,
                0x8108, 0x9129, 0xa14a, 0xb16b, 0xc18c, 0xd1ad, 0xe1ce, 0xf1ef,
                0x1231, 0x0210, 0x3273, 0x2252, 0x52b5, 0x4294, 0x72f7, 0x62d6,
                0x9339, 0x8318, 0xb37b, 0xa35a, 0xd3bd, 0xc39c, 0xf3ff, 0xe3de,
                0x2462, 0x3443, 0x0420, 0x1401, 0x64e6, 0x74c7, 0x44a4, 0x5485,
                0xa56a, 0xb54b, 0x8528, 0x9509, 0xe5ee, 0xf5cf, 0xc5ac, 0xd58d,
                0x3653, 0x2672, 0x1611, 0x0630, 0x76d7, 0x66f6, 0x5695, 0x46b4,
                0xb75b, 0xa77a, 0x9719, 0x8738, 0xf7df, 0xe7fe, 0xd79d, 0xc7bc,
                0x48c4, 0x58e5, 0x6886, 0x78a7, 0x0840, 0x1861, 0x2802, 0x3823,
                0xc9cc, 0xd9ed, 0xe98e, 0xf9af, 0x8948, 0x9969, 0xa90a, 0xb92b,
                0x5af5, 0x4ad4, 0x7ab7, 0x6a96, 0x1a71, 0x0a50, 0x3a33, 0x2a12,
                0xdbfd, 0xcbdc, 0xfbbf, 0xeb9e, 0x9b79, 0x8b58, 0xbb3b, 0xab1a,
                0x6ca6, 0x7c87, 0x4ce4, 0x5cc5, 0x2c22, 0x3c03, 0x0c60, 0x1c41,
                0xedae, 0xfd8f, 0xcdec, 0xddcd, 0xad2a, 0xbd0b, 0x8d68, 0x9d49,
                0x7e97, 0x6eb6, 0x5ed5, 0x4ef4, 0x3e13, 0x2e32, 0x1e51, 0x0e70,
                0xff9f, 0xefbe, 0xdfdd, 0xcffc, 0xbf1b, 0xaf3a, 0x9f59, 0x8f78,
                0x9188, 0x81a9, 0xb1ca, 0xa1eb, 0xd10c, 0xc12d, 0xf14e, 0xe16f,
                0x1080, 0x00a1, 0x30c2, 0x20e3, 0x5004, 0x4025, 0x7046, 0x6067,
                0x83b9, 0x9398, 0xa3fb, 0xb3da, 0xc33d, 0xd31c, 0xe37f, 0xf35e,
                0x02b1, 0x1290, 0x22f3, 0x32d2, 0x4235, 0x5214, 0x6277, 0x7256,
                0xb5ea, 0xa5cb, 0x95a8, 0x8589, 0xf56e, 0xe54f, 0xd52c, 0xc50d,
                0x34e2, 0x24c3, 0x14a0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405,
                0xa7db, 0xb7fa, 0x8799, 0x97b8, 0xe75f, 0xf77e, 0xc71d, 0xd73c,
                0x26d3, 0x36f2, 0x0691, 0x16b0, 0x6657, 0x7676, 0x4615, 0x5634,
                0xd94c, 0xc96d, 0xf90e, 0xe92f, 0x99c8, 0x89e9, 0xb98a, 0xa9ab,
                0x5844, 0x4865, 0x7806, 0x6827, 0x18c0, 0x08e1, 0x3882, 0x28a3,
                0xcb7d, 0xdb5c, 0xeb3f, 0xfb1e, 0x8bf9, 0x9bd8, 0xabbb, 0xbb9a,
                0x4a75, 0x5a54, 0x6a37, 0x7a16, 0x0af1, 0x1ad0, 0x2ab3, 0x3a92,
                0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b, 0x9de8, 0x8dc9,
                0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1,
                0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
                0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0
    };


    public static short fn_makeCRC16(byte[] bytes, int nLength){
        short wData, wCRC_16 = 0;
        int pCnt = 0;
        byte[] pSizeBuf = new byte[Variables.DATA_BUFFER_SIZE];
       // int[] CRC = CRCTable();

        System.arraycopy(bytes, 1, pSizeBuf, 0, nLength);

        nLength *= 8;

        for(wCRC_16=0; nLength>=8; nLength -= 8, pCnt++) {
            wCRC_16 = (short)(Crc16Table[((wCRC_16>>8) ^ pSizeBuf[pCnt]) & 0xFF] ^ (wCRC_16 << 8));
//            Debug.loge(new Exception(), "pCnt : " + pCnt + ", wCRC : " + String.format("%04x ",wCRC_16&0xFFFF));
        }

        if(nLength-- != 0) {
            wData = (short)(pSizeBuf[pCnt] << 8);

            while(nLength-- != 0){
                if(((wCRC_16 ^ wData) & ((short)1 << 15)) != 0){
                    wCRC_16 <<= 1;
                    wCRC_16 ^= 0x1021;
                }
                else
                    wCRC_16 <<= 1;
                wData <<= 1;
            }
        }

        return wCRC_16;
    }

//    public static byte[] fn_makeCRC16(byte[] bytes){
//        //위의 txt 파일에 있는 값을 소스상에 붙여넣기 하고 해당값을 가져온다.
//        int[] CRC = CRCTable();
//        int icrc = 0x00;
//        for (byte b : bytes) {
//            icrc = (icrc >>> 8) ^ CRC[(icrc ^ b) & 0xff];
//        }
//        System.out.println("Integer " + Integer.toHexString(icrc)); // test   나와야되는 값
//        return fnShortToBytes((short)icrc,0);//HtypeCast의 short를 byte로 변환해주는 함수
//    }

    //short 값을 바이트 배열로 변환
    public static byte[] fnShortToBytes(short Value, int Order){
        byte[] temp;
        temp = new byte[]{ (byte)((Value & 0xFF00) >> 8), (byte)(Value & 0x00FF) };
        temp = fnChangeByteOrder(temp,Order);
        return temp;
    }

    //상 하위 변환
    private static byte[] fnChangeByteOrder(byte[] value,int Order){
        int idx = value.length;
        byte[] Temp = new byte[idx];

        if(Order == 1){
            Temp = value;
        }else if(Order == 0){
            for(int i=0;i<idx;i++) {
                Temp[i] = value[idx-(i+1)];
            }
        }
        return Temp;
    }
}
